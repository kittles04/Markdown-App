[{"/Users/kwalker/Desktop/markdown-app/src/App.js":"1","/Users/kwalker/Desktop/markdown-app/src/components/Editor.js":"2","/Users/kwalker/Desktop/markdown-app/src/components/Previewer.js":"3","/Users/kwalker/Desktop/markdown-app/src/index.js":"4"},{"size":228,"mtime":1606650664623,"results":"5","hashOfConfig":"6"},{"size":1730,"mtime":1606605722298,"results":"7","hashOfConfig":"6"},{"size":604,"mtime":1606655793837,"results":"8","hashOfConfig":"6"},{"size":501,"mtime":1606650656573,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1letlcf",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kwalker/Desktop/markdown-app/src/App.js",["20"],"/Users/kwalker/Desktop/markdown-app/src/components/Editor.js",["21"],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Previewer from \"./Previewer\";\n\nconst previewText = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n //this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\nexport default function Editor() {\n  const [markdown, updateMarkdown] = useState(previewText);\n\n  const handleChange = (e) => {\n    updateMarkdown(e.target.value);\n    console.log(markdown);\n  };\n\n  return (\n    <div className={\"editorWrap\"}>\n      <textarea\n        id={\"editor\"}\n        value={markdown}\n        onChange={(e) => {\n          handleChange(e);\n        }}\n      >\n        {previewText}\n      </textarea>\n      <Previewer markdown={markdown} previewText={previewText} />\n    </div>\n  );\n}\n","/Users/kwalker/Desktop/markdown-app/src/components/Previewer.js",["22"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport marked from \"marked\";\n\nconst Previewer = ({ markdown, previewText }) => {\n  let options = {\n    breaks: true,\n    gfm: true,\n  };\n  return (\n    <div id={\"previewWrapper\"}>\n      <div\n        id={\"preview\"}\n        dangerouslySetInnerHTML={{\n          __html: marked(previewText),\n        }}\n        dangerouslySetInnerHTML={{\n          __html: marked(markdown, options),\n        }}\n      ></div>\n    </div>\n  );\n};\n\nPreviewer.propTypes = {\n  markdown: PropTypes.string,\n  previewText: PropTypes.string,\n};\n\nexport default Previewer;\n","/Users/kwalker/Desktop/markdown-app/src/index.js",[],{"ruleId":"23","severity":1,"message":"24","line":3,"column":8,"nodeType":"25","messageId":"26","endLine":3,"endColumn":17},{"ruleId":"23","severity":1,"message":"27","line":2,"column":20,"nodeType":"25","messageId":"26","endLine":2,"endColumn":29},{"ruleId":"28","severity":1,"message":"29","line":17,"column":9,"nodeType":"30","endLine":19,"endColumn":11},"no-unused-vars","'Previewer' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute"]